/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,17],$V2=[1,44],$V3=[1,43],$V4=[1,26],$V5=[1,20],$V6=[1,21],$V7=[1,38],$V8=[1,22],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,36],$Vm=[1,37],$Vn=[1,39],$Vo=[1,40],$Vp=[1,41],$Vq=[1,42],$Vr=[5,21,25,26,28,29,32,35,37,38,39,41,45,46,47,49,53,54,55,56,57,62,63,64,65,81,82,83,84,85,86],$Vs=[1,52],$Vt=[1,51],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,64],$Vy=[1,65],$Vz=[1,67],$VA=[1,66],$VB=[1,56],$VC=[1,57],$VD=[1,58],$VE=[1,59],$VF=[1,60],$VG=[1,61],$VH=[1,62],$VI=[1,63],$VJ=[1,71],$VK=[26,41,62,81,82,83,84,85,86],$VL=[20,27,42,51,59,60,61,67,68,69,70,71,72,73,74,75,76,79,80],$VM=[2,98],$VN=[1,86],$VO=[5,21,25,26,28,29,30,32,35,37,38,39,41,45,46,47,49,53,54,55,56,57,62,63,64,65,81,82,83,84,85,86],$VP=[20,27,42,51,59,60,61],$VQ=[20,27,42,51,59,60,61,71,72,73,74,75,76],$VR=[20,27,42,51,59,60,61,71,72,73,74,75,76,79,80],$VS=[20,27,42,51,59,60,61,67,68,71,72,73,74,75,76,79,80],$VT=[1,157],$VU=[27,51],$VV=[1,184],$VW=[1,185],$VX=[29,35,38],$VY=[5,21,25,26,27,28,29,32,35,37,38,39,41,45,46,47,49,53,54,55,56,57,62,63,64,65,81,82,83,84,85,86],$VZ=[1,234],$V_=[1,235];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INTRUCCIONES":4,"EOF":5,"INTRUCCION":6,"DVARIABLES":7,"ASIGNACION":8,"IF":9,"SWITCH":10,"FOR":11,"WHILE":12,"DO_WHILE":13,"MET_FUN":14,"LLAMADA":15,"BLOQUE":16,"FUNCIONES_NATIVAS":17,"TIPO_DATO":18,"EXPRESION":19,"punto_coma":20,"r_const":21,"CUERPO_IF":22,"ELSE_IF":23,"ELSE":24,"r_if":25,"parentesis_a":26,"parentesis_c":27,"llave_a":28,"llave_c":29,"r_else":30,"I_ELSE_IF":31,"r_switch":32,"CASE":33,"I_CASE":34,"r_case":35,"dos_puntos":36,"r_break":37,"default":38,"r_for":39,"ASIG_FOR":40,"identificador":41,"igual":42,"INCREMENTALES":43,"EXPRESION_RELACIONAL":44,"r_while":45,"r_do":46,"r_void":47,"ASIG_PARAMETROS":48,"r_call":49,"PARAMETROS":50,"coma":51,"A_P":52,"r_int":53,"r_double":54,"r_string":55,"r_char":56,"r_bool":57,"EXPRESIONES_LOGICAS":58,"or":59,"xor":60,"and":61,"not":62,"r_println":63,"r_print":64,"r_typeof":65,"EXPRESIONES_ARITMETICAS":66,"suma":67,"resta":68,"div":69,"por":70,"mayor":71,"mayor_igual":72,"menor":73,"menor_igual":74,"igual_que":75,"no_igual":76,"incremento":77,"decremento":78,"mod":79,"potencia":80,"decimal":81,"entero":82,"cadena":83,"caracter":84,"r_true":85,"r_false":86,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"punto_coma",21:"r_const",25:"r_if",26:"parentesis_a",27:"parentesis_c",28:"llave_a",29:"llave_c",30:"r_else",32:"r_switch",35:"r_case",36:"dos_puntos",37:"r_break",38:"default",39:"r_for",41:"identificador",42:"igual",45:"r_while",46:"r_do",47:"r_void",49:"r_call",51:"coma",53:"r_int",54:"r_double",55:"r_string",56:"r_char",57:"r_bool",59:"or",60:"xor",61:"and",62:"not",63:"r_println",64:"r_print",65:"r_typeof",67:"suma",68:"resta",69:"div",70:"por",71:"mayor",72:"mayor_igual",73:"menor",74:"menor_igual",75:"igual_que",76:"no_igual",77:"incremento",78:"decremento",79:"mod",80:"potencia",81:"decimal",82:"entero",83:"cadena",84:"caracter",85:"r_true",86:"r_false"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[7,4],[8,2],[9,2],[9,3],[9,2],[9,1],[22,7],[24,4],[23,2],[23,1],[31,8],[10,7],[33,2],[33,1],[34,5],[34,3],[11,7],[40,9],[40,10],[12,7],[13,9],[14,7],[14,8],[14,7],[14,8],[15,5],[15,6],[48,3],[48,1],[52,2],[50,3],[50,1],[16,3],[18,1],[18,1],[18,1],[18,1],[18,1],[58,1],[58,1],[58,1],[58,1],[17,5],[17,5],[17,4],[17,5],[17,5],[17,4],[17,5],[66,1],[66,1],[66,1],[66,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[43,1],[43,1],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
console.error('Este es un error sintactico: ' + yytext + ', en la linea: '+ this._$.first_line+', en la columna: '+this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{1:[3]},{5:[1,45],6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,3]),o($Vr,[2,4]),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),o($Vr,[2,13]),o($Vr,[2,14]),o($Vr,[2,15]),{19:47,26:$V3,41:[1,48],62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{18:49,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{20:[1,50],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},o($Vr,[2,22],{23:68,24:69,31:70,30:$VJ}),{26:[1,72]},{26:[1,73]},{26:[1,74]},{28:[1,75]},{41:[1,76]},{41:[1,77]},{2:$V0,4:78,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{26:[1,79]},{26:[1,80]},{26:[1,81]},o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VK,[2,53]),o($VK,[2,54]),{19:82,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VL,[2,96]),o($VL,[2,97]),o($VL,$VM),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,101]),o($VL,[2,102]),{19:83,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{26:[1,84]},{1:[2,1]},o($Vr,[2,2]),{20:[1,85],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},o([20,42,51,59,60,61,67,68,69,70,71,72,73,74,75,76,79,80],$VM,{26:$VN}),{19:87,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,18]),{41:[1,88]},{19:89,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:90,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:91,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:92,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:93,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:94,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:95,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:96,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:97,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:98,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:99,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:100,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:101,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:102,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:103,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:104,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,19],{24:105,31:106,30:$VJ}),o($Vr,[2,21]),o($VO,[2,26]),{25:[1,108],28:[1,107]},{19:109,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{18:111,40:110,41:[1,112],53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{19:113,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{2:$V0,4:114,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{26:[1,115]},{26:[1,116]},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,117],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{14:119,18:121,19:118,26:$V3,27:[1,120],41:$V7,47:$Va,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{14:123,18:121,19:122,26:$V3,27:[1,124],41:$V7,47:$Va,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:125,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VP,[2,81],{67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI}),{27:[1,126],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{19:127,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,16]),{18:131,27:[1,128],48:129,52:130,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{20:[1,132],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},o($VL,[2,78]),o([20,27,42,51],[2,79],{59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI}),o($VP,[2,80],{67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI}),o($VP,[2,82],{67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI}),o($VP,[2,83],{67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI}),o($VQ,[2,84],{67:$Vx,68:$Vy,69:$Vz,70:$VA,79:$VH,80:$VI}),o($VQ,[2,85],{67:$Vx,68:$Vy,69:$Vz,70:$VA,79:$VH,80:$VI}),o($VQ,[2,86],{67:$Vx,68:$Vy,69:$Vz,70:$VA,79:$VH,80:$VI}),o($VQ,[2,87],{67:$Vx,68:$Vy,69:$Vz,70:$VA,79:$VH,80:$VI}),o($VQ,[2,88],{67:$Vx,68:$Vy,69:$Vz,70:$VA,79:$VH,80:$VI}),o($VQ,[2,89],{67:$Vx,68:$Vy,69:$Vz,70:$VA,79:$VH,80:$VI}),o($VR,[2,90],{67:$Vx,68:$Vy,69:$Vz,70:$VA}),o($VR,[2,91],{67:$Vx,68:$Vy,69:$Vz,70:$VA}),o($VS,[2,92],{69:$Vz,70:$VA}),o($VS,[2,93],{69:$Vz,70:$VA}),o($VL,[2,94]),o($VL,[2,95]),o($Vr,[2,20]),o($VO,[2,25]),{2:$V0,4:133,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{26:[1,134]},{27:[1,135],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{27:[1,136]},{41:[1,137]},{42:[1,138]},{27:[1,139],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,140],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{18:131,27:[1,141],48:142,52:130,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg},{27:[1,143],41:[1,145],50:144},o($Vr,[2,49]),{27:[1,146],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{27:[1,147]},{20:[1,148]},{41:[1,149]},{27:[1,150],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{27:[1,151]},{20:[1,152]},{27:[1,153],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},o($VL,[2,103]),{27:[1,154],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{28:[1,155]},{27:[1,156],51:$VT},o($VU,[2,45]),{41:[1,158]},o($Vr,[2,17]),{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,159],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:160,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{28:[1,161]},{28:[1,162]},{42:[1,163]},{19:164,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{28:[1,165]},{45:[1,166]},{28:[1,167]},{27:[1,168],51:$VT},{20:[1,169]},{27:[1,170],51:[1,171]},o($VU,[2,48]),{20:[1,172]},{20:[1,173]},o($Vr,[2,61]),{26:$VN},{20:[1,174]},{20:[1,175]},o($Vr,[2,64]),{20:[1,176]},{28:[1,177]},{2:$V0,4:178,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{28:[1,179]},{18:131,52:180,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg},o($VU,[2,46]),o($Vr,[2,24]),{27:[1,181],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{33:182,34:183,35:$VV,38:$VW},{2:$V0,4:186,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:187,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{20:[1,188],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{2:$V0,4:189,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{26:[1,190]},{2:$V0,4:191,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{28:[1,192]},o($Vr,[2,42]),{20:[1,193]},{41:[1,194]},o($Vr,[2,59]),o($Vr,[2,60]),o($Vr,[2,62]),o($Vr,[2,63]),o($Vr,[2,65]),{2:$V0,4:195,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,196],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{2:$V0,4:197,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VU,[2,44]),{28:[1,198]},{29:[1,199],34:200,35:$VV,38:$VW},o($VX,[2,30]),{36:[1,201]},{36:[1,202]},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,203],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{20:[1,204],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{41:[1,205]},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,206],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{19:207,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,208],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{2:$V0,4:209,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,43]),o($VU,[2,47]),{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,210],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VY,[2,40]),{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,211],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{2:$V0,4:212,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,28]),o($VX,[2,29]),{2:$V0,4:213,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{2:$V0,4:214,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($Vr,[2,33]),{19:215,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{44:216,71:[1,217],72:[1,218],73:[1,219],74:[1,220],75:[1,221],76:[1,222]},o($Vr,[2,36]),{27:[1,223],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},o($VY,[2,38]),{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,224],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VO,[2,23]),o($VY,[2,41]),{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,29:[1,225],32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},{6:46,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,21:$V1,22:19,25:$V2,26:$V3,28:$V4,32:$V5,37:[1,226],39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VX,[2,32],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:18,22:19,6:46,21:$V1,25:$V2,26:$V3,28:$V4,32:$V5,39:$V6,41:$V7,45:$V8,46:$V9,47:$Va,49:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,62:$Vh,63:$Vi,64:$Vj,65:$Vk,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq}),{20:[1,227],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},{19:228,26:$V3,41:$V7,62:$Vh,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:$Vq},o($VK,[2,70]),o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),o($VK,[2,75]),{20:[1,229]},o($VY,[2,39]),o($VO,[2,27]),{20:[1,230]},{41:[1,231]},{20:[1,232],42:$Vs,51:$Vt,59:$Vu,60:$Vv,61:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,79:$VH,80:$VI},o($Vr,[2,37]),o($VX,[2,31]),{43:233,77:$VZ,78:$V_},{41:[1,236]},{27:[2,34]},{27:[2,76]},{27:[2,77]},{43:237,77:$VZ,78:$V_},{27:[2,35]}],
defaultActions: {45:[2,1],233:[2,34],234:[2,76],235:[2,77],237:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'COMILLASDOBLES';
break;
case 1:return 'BARRAINVERTIDA';
break;
case 2:return 'NUEVALINEA';
break;
case 3:return 'RETORNO';
break;
case 4:return 'TABULACION';
break;
case 5:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 53;
					
break;
case 6:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 54;
					
break;
case 7:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 56;
					
break;
case 8:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 57;
					
break;
case 9:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 55;
					
break;
case 10:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 21;
					
break;
case 11:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 25;
					
break;
case 12:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 30;
					
break;
case 13:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 32;
					
break;
case 14:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 35;
					
break;
case 15:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_default';
					
break;
case 16:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 39;
					
break;
case 17:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 45;
					
break;
case 18:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 46;
					
break;
case 19:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 37;
					
break;
case 20:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_continue';
					
break;
case 21:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 47;
					
break;
case 22:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_return';
					
break;
case 23:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 49;
					
break;
case 24:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 63;
					
break;
case 25:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 64;
					
break;
case 26:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 65;
					
break;
case 27:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 85;
					
break;
case 28:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 86;
					
break;
case 29:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 72;
					
break;
case 30:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 74;
					
break;
case 31:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 75;
					
break;
case 32:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 76;
					
break;
case 33:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 71;
					
break;
case 34:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 73;
					
break;
case 35:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 59;
					
break;
case 36:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 61;
					
break;
case 37:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 60;
					
break;
case 38:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 62;
					
break;
case 39:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 42;
					
break;
case 40:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 20;
					
break;
case 41:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 51;
					
break;
case 42:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 36;
					
break;
case 43:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 26;
					
break;
case 44:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 27;
					
break;
case 45:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 28;
					
break;
case 46:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 29;
					
break;
case 47:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 77;
					
break;
case 48:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 78;
					
break;
case 49:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 80;
					
break;
case 50:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 67;
					
break;
case 51:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 68;
					
break;
case 52:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 70;
					
break;
case 53:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 69;
					
break;
case 54:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 79;
					
break;
case 55:
							console.log("Se reconocio el lexema: " + yy_.yytext);
							return 81;
						
break;
case 56:
							console.log("Se reconocio el lexema: " + yy_.yytext);
							return 82;
						
break;
case 57:
							console.log("Se reconocio el lexema: " + yy_.yytext);
							return 41;
						
break;
case 58:
							console.log("Se reconocio el lexema: " + yy_.yytext);
							return 83;
						
break;
case 59:
							console.log("Se reconocio el lexema: " + yy_.yytext);
							return 84;
						
break;
case 60:
break;
case 61:
break;
case 62:
break;
case 63:return 5;
break;
case 64: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:")/,/^(?:\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:call\b)/,/^(?:Println\b)/,/^(?:Print\b)/,/^(?:Typeof\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\^)/,/^(?:!)/,/^(?:=)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[0-9]+(\.[0-9]+)?)/,/^(?:[0-9]+)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:["\""][ ^ \"]*["\""])/,/^(?:["\'"][^\"]?["\'"])/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:[\/*][^.*]+[*\/])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}