/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,15],$V2=[1,29],$V3=[1,23],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[5,31,39],$Vg=[2,5,21,27,30,31,34,39,40,44,45,46,47,52,53,54,55,56],$Vh=[1,37],$Vi=[2,5,21,27,30,31,32,34,39,40,44,45,46,47,52,53,54,55,56],$Vj=[1,60],$Vk=[1,61],$Vl=[1,58],$Vm=[1,59],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,81],$Vs=[1,82],$Vt=[1,83],$Vu=[1,92],$Vv=[1,93],$Vw=[1,95],$Vx=[1,94],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[20,29,58,59,60,63,64,65,66,67,68,69,70,71,72,75,76],$VH=[1,108],$VI=[31,37],$VJ=[20,29,58,59,60],$VK=[20,29,58,59,60,67,68,69,70,71,72],$VL=[20,29,58,59,60,67,68,69,70,71,72,75,76],$VM=[20,29,58,59,60,63,64,67,68,69,70,71,72,75,76],$VN=[1,160],$VO=[1,161],$VP=[1,162],$VQ=[1,163],$VR=[1,164],$VS=[1,165],$VT=[17,28,48,49],$VU=[1,178],$VV=[1,179];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INTRUCCIONES":4,"EOF":5,"INTRUCCION":6,"DVARIABLES":7,"IF":8,"SWITCH":9,"FOR":10,"WHILE":11,"DO_WHILE":12,"MET_FUN":13,"LLAMADA":14,"BLOQUE":15,"TIPO_DATO":16,"identificador":17,"igual":18,"TIPO_EXPRESION":19,"punto_coma":20,"r_const":21,"ASIGNACION":22,"EXPRESION":23,"CUERPO_IF":24,"ELSE_IF":25,"ELSE":26,"r_if":27,"parentesis_a":28,"parentesis_c":29,"llave_a":30,"llave_c":31,"r_else":32,"I_ELSE_IF":33,"r_switch":34,"CASE":35,"I_CASE":36,"r_case":37,"dos_puntos":38,"r_break":39,"r_for":40,"ASIG_FOR":41,"EXPRESION_RELACIONAL":42,"INCREMENTALES":43,"r_while":44,"r_do":45,"r_void":46,"r_call":47,"decimal":48,"entero":49,"r_true":50,"r_false":51,"r_int":52,"r_double":53,"r_string":54,"r_char":55,"r_bool":56,"EXPRESIONES_LOGICAS":57,"or":58,"xor":59,"and":60,"not":61,"EXPRESIONES_ARITMETICAS":62,"suma":63,"resta":64,"div":65,"por":66,"mayor":67,"mayor_igual":68,"menor":69,"menor_igual":70,"igual_que":71,"no_igual":72,"incremento":73,"decremento":74,"mod":75,"potencia":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"identificador",18:"igual",20:"punto_coma",21:"r_const",27:"r_if",28:"parentesis_a",29:"parentesis_c",30:"llave_a",31:"llave_c",32:"r_else",34:"r_switch",37:"r_case",38:"dos_puntos",39:"r_break",40:"r_for",44:"r_while",45:"r_do",46:"r_void",47:"r_call",48:"decimal",49:"entero",50:"r_true",51:"r_false",52:"r_int",53:"r_double",54:"r_string",55:"r_char",56:"r_bool",58:"or",59:"xor",60:"and",61:"not",63:"suma",64:"resta",65:"div",66:"por",67:"mayor",68:"mayor_igual",69:"menor",70:"menor_igual",71:"igual_que",72:"no_igual",73:"incremento",74:"decremento",75:"mod",76:"potencia"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,6],[22,4],[22,4],[8,2],[8,3],[8,2],[8,1],[24,7],[26,4],[25,2],[25,1],[33,8],[9,6],[35,2],[35,1],[36,5],[10,7],[41,11],[41,10],[11,7],[12,9],[13,7],[13,7],[14,5],[15,3],[19,1],[19,1],[19,1],[19,1],[16,1],[16,1],[16,1],[16,1],[16,1],[57,1],[57,1],[57,1],[57,1],[62,1],[62,1],[62,1],[62,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[43,1],[43,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,1],[23,1],[23,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
console.error('Este es un error sintactico: ' + yytext + ', en la linea: '+ this._$.first_line+', en la columna: '+this._$.first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{1:[3]},{5:[1,30]},o($Vf,[2,3],{6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,24:16,4:31,2:$V0,21:$V1,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve}),o($Vf,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{17:[1,32]},{16:33,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},o($Vg,[2,21],{25:34,26:35,33:36,32:$Vh}),{28:[1,38]},{28:[1,39]},{28:[1,40]},{30:[1,41]},{17:[1,42]},{17:[1,43]},{2:$V0,4:44,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{17:[2,44]},{17:[2,45]},{17:[2,46]},{17:[2,47]},{17:[2,48]},{28:[1,45]},{1:[2,1]},o($Vf,[2,2]),{18:[1,46],28:[1,47]},{17:[1,48]},o($Vg,[2,18],{26:49,33:50,32:$Vh}),o($Vg,[2,20]),o($Vi,[2,25]),{27:[1,52],30:[1,51]},{29:[1,53]},{16:55,17:[1,56],41:54,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{17:$Vj,23:57,28:$Vk,48:$Vl,49:$Vm},{2:$V0,4:62,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{28:[1,63]},{28:[1,64]},{31:[1,65]},{17:$Vj,23:66,28:$Vk,48:$Vl,49:$Vm},{19:67,48:$Vn,49:$Vo,50:$Vp,51:$Vq},{29:[1,72]},{18:[1,73]},o($Vg,[2,19]),o($Vi,[2,24]),{2:$V0,4:74,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{28:[1,75]},{30:[1,76]},{29:[1,77]},{17:[1,78]},{18:[1,79]},{29:[1,80],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},o($VG,[2,80]),o($VG,[2,81]),o($VG,[2,82]),{17:$Vj,23:96,28:$Vk,48:$Vl,49:$Vm},{31:[1,97]},{29:[1,98]},{29:[1,99]},o($Vg,[2,39]),{29:[1,100],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},{20:[1,101]},{20:[2,40]},{20:[2,41]},{20:[2,42]},{20:[2,43]},{30:[1,102]},{19:103,48:$Vn,49:$Vo,50:$Vp,51:$Vq},{31:[1,104]},{17:$Vj,23:105,28:$Vk,48:$Vl,49:$Vm},{35:106,36:107,37:$VH},{30:[1,109]},{18:[1,110]},{17:$Vj,23:111,28:$Vk,48:$Vl,49:$Vm},{30:[1,112]},{17:$Vj,23:113,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:114,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:115,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:116,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:117,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:118,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:119,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:120,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:121,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:122,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:123,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:124,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:125,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:126,28:$Vk,48:$Vl,49:$Vm},{17:$Vj,23:127,28:$Vk,48:$Vl,49:$Vm},{29:[1,128],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},{44:[1,129]},{30:[1,130]},{20:[1,131]},{30:[1,132]},o($Vg,[2,14]),{2:$V0,4:133,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{20:[1,134]},o($Vg,[2,23]),{29:[1,135],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},{31:[1,136],36:137,37:$VH},o($VI,[2,29]),{38:[1,138]},{2:$V0,4:139,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{17:$Vj,23:140,28:$Vk,48:$Vl,49:$Vm},{20:[1,141],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},{2:$V0,4:142,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},o($VJ,[2,65],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF}),o($VJ,[2,66],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF}),o($VJ,[2,67],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF}),o($VK,[2,68],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,75:$VE,76:$VF}),o($VK,[2,69],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,75:$VE,76:$VF}),o($VK,[2,70],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,75:$VE,76:$VF}),o($VK,[2,71],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,75:$VE,76:$VF}),o($VK,[2,72],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,75:$VE,76:$VF}),o($VK,[2,73],{63:$Vu,64:$Vv,65:$Vw,66:$Vx,75:$VE,76:$VF}),o($VL,[2,74],{63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VL,[2,75],{63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VM,[2,76],{65:$Vw,66:$Vx}),o($VM,[2,77],{65:$Vw,66:$Vx}),o($VG,[2,78]),o($VG,[2,79]),o($VG,[2,83]),{28:[1,143]},{2:$V0,4:144,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},o($Vg,[2,38]),{2:$V0,4:145,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{31:[1,146]},o($Vg,[2,15]),{30:[1,147]},o($Vg,[2,27]),o($VI,[2,28]),{2:$V0,4:148,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{31:[1,149]},{20:[1,150],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},{17:[1,151]},{31:[1,152]},{17:$Vj,23:153,28:$Vk,48:$Vl,49:$Vm},{31:[1,154]},{31:[1,155]},o($Vg,[2,37]),{2:$V0,4:156,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,21:$V1,24:16,27:$V2,30:$V3,34:$V4,40:$V5,44:$V6,45:$V7,46:$V8,47:$V9,52:$Va,53:$Vb,54:$Vc,55:$Vd,56:$Ve},{39:[1,157]},o($Vg,[2,31]),{17:[1,158]},{42:159,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},o($Vg,[2,34]),{29:[1,166],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},o($Vg,[2,36]),o($Vi,[2,22]),{31:[1,167]},{20:[1,168]},{42:169,67:$VN,68:$VO,69:$VP,70:$VQ,71:$VR,72:$VS},{17:$Vj,23:170,28:$Vk,48:$Vl,49:$Vm},o($VT,[2,57]),o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),o($VT,[2,61]),o($VT,[2,62]),{20:[1,171]},o($Vi,[2,26]),o($VI,[2,30]),{17:$Vj,23:172,28:$Vk,48:$Vl,49:$Vm},{20:[1,173],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},o($Vg,[2,35]),{20:[1,174],58:$Vr,59:$Vs,60:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,75:$VE,76:$VF},{17:[1,175]},{17:[1,176]},{43:177,73:$VU,74:$VV},{43:180,73:$VU,74:$VV},{29:[2,33]},{29:[2,63]},{29:[2,64]},{29:[2,32]}],
defaultActions: {24:[2,44],25:[2,45],26:[2,46],27:[2,47],28:[2,48],30:[2,1],68:[2,40],69:[2,41],70:[2,42],71:[2,43],177:[2,33],178:[2,63],179:[2,64],180:[2,32]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 'COMILLASDOBLES';
break;
case 1:return 'BARRAINVERTIDA';
break;
case 2:return 'NUEVALINEA';
break;
case 3:return 'RETORNO';
break;
case 4:return 'TABULACION';
break;
case 5:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 52;
					
break;
case 6:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 53;
					
break;
case 7:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 55;
					
break;
case 8:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 56;
					
break;
case 9:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 54;
					
break;
case 10:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 21;
					
break;
case 11:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 27;
					
break;
case 12:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 32;
					
break;
case 13:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 34;
					
break;
case 14:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 37;
					
break;
case 15:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_default';
					
break;
case 16:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 40;
					
break;
case 17:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 44;
					
break;
case 18:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 45;
					
break;
case 19:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 39;
					
break;
case 20:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_continue';
					
break;
case 21:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 46;
					
break;
case 22:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_return';
					
break;
case 23:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 47;
					
break;
case 24:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_println';
					
break;
case 25:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_print';
					
break;
case 26:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_typeof';
					
break;
case 27:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 50;
					
break;
case 28:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 51;
					
break;
case 29:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 68;
					
break;
case 30:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 70;
					
break;
case 31:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 71;
					
break;
case 32:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 72;
					
break;
case 33:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 67;
					
break;
case 34:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 69;
					
break;
case 35:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 58;
					
break;
case 36:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 60;
					
break;
case 37:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 59;
					
break;
case 38:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 61;
					
break;
case 39:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 18;
					
break;
case 40:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 20;
					
break;
case 41:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'coma';
					
break;
case 42:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 38;
					
break;
case 43:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 28;
					
break;
case 44:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 29;
					
break;
case 45:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 30;
					
break;
case 46:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 31;
					
break;
case 47:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 73;
					
break;
case 48:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 74;
					
break;
case 49:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 76;
					
break;
case 50:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 63;
					
break;
case 51:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 64;
					
break;
case 52:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 66;
					
break;
case 53:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 65;
					
break;
case 54:
						console.log("Se reconocio el lexema: " + yy_.yytext);
						return 75;
					
break;
case 55:return 48;
break;
case 56:return 49;
break;
case 57:return 17;
break;
case 58:
break;
case 59:
break;
case 60:return 5;
break;
case 61: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:")/,/^(?:\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:const\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:call\b)/,/^(?:Println\b)/,/^(?:Print\b)/,/^(?:Typeof\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:>=)/,/^(?:<=)/,/^(?:==)/,/^(?:!=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:\^)/,/^(?:!)/,/^(?:=)/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:[ \r\t]+)/,/^(?:\n)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}