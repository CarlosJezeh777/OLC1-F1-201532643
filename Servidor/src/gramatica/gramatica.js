/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,24],$V2=[1,23],$V3=[1,54],$V4=[1,56],$V5=[1,40],$V6=[1,26],$V7=[1,27],$V8=[1,33],$V9=[1,37],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,45],$Vk=[1,46],$Vl=[1,47],$Vm=[1,34],$Vn=[1,35],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,36],$Vz=[1,38],$VA=[5,25,28,29,36,40,43,44,48,49,51,53,55,56,57,58,60,61,62,64,68,69,70,71,72,73,74,75,76,78,79,80,81,82,84,99,100,101,102,103,104],$VB=[2,16],$VC=[55,67,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VD=[2,104],$VE=[1,65],$VF=[1,68],$VG=[1,69],$VH=[1,72],$VI=[1,87],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[1,101],$VX=[1,102],$VY=[25,31],$VZ=[28,32,37,41,49,55,67,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$V_=[1,113],$V$=[1,114],$V01=[1,115],$V11=[1,123],$V21=[28,37],$V31=[1,125],$V41=[2,112],$V51=[28,32,37,41,49,55,67],$V61=[28,32,37,41,49,55,67,83,85,86],$V71=[1,200],$V81=[28,32,37,41,49,55,67,83,85,86,87,88,89,90,91,92],$V91=[28,32,37,41,49,55,67,83,85,86,87,88,89,90,91,92,93,94],$Va1=[28,32,37,41,49,55,67,83,85,86,87,88,89,90,91,92,93,94,95,96],$Vb1=[1,205],$Vc1=[37,41],$Vd1=[2,103],$Ve1=[1,215],$Vf1=[5,25,28,29,36,40,43,44,45,48,49,51,53,55,56,57,58,60,61,62,64,68,69,70,71,72,73,74,75,76,78,79,80,81,82,84,99,100,101,102,103,104],$Vg1=[1,247],$Vh1=[1,248],$Vi1=[1,250],$Vj1=[5,25,28,29,36,37,40,43,44,48,49,51,53,55,56,57,58,60,61,62,64,68,69,70,71,72,73,74,75,76,78,79,80,81,82,84,99,100,101,102,103,104],$Vk1=[51,53,57],$Vl1=[25,29,36,40,43,44,48,49,56,58,60,61,62,64,68,69,70,71,72,73,74,75,76,78,79,80,81,82,84,99,100,101,102,103,104],$Vm1=[2,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INTRUCCIONES":4,"EOF":5,"INTRUCCION":6,"DVARIABLES":7,"ASIGNACION":8,"IF":9,"SWITCH":10,"FOR":11,"WHILE":12,"DO_WHILE":13,"MET_FUN":14,"LLAMADA":15,"BLOQUE":16,"FUNCIONES_NATIVAS":17,"RETORNO":18,"TERNARIO":19,"DECLARACIONVECTORES":20,"GRAFICARTS":21,"ASIGNACIONVECTORES":22,"METODOSVECTORES":23,"TIPO_DATO":24,"identificador":25,"igual":26,"EXPRESION":27,"punto_coma":28,"r_const":29,"INCREMENTOS":30,"corchete_a":31,"corchete_c":32,"r_new":33,"punto":34,"r_pop":35,"parentesis_a":36,"parentesis_c":37,"r_push":38,"r_splice":39,"entero":40,"coma":41,"r_toChar":42,"r_graficarTs":43,"r_if":44,"r_else":45,"ELSE_IF":46,"I_ELSE_IF":47,"r_switch":48,"llave_a":49,"CASE":50,"llave_c":51,"I_CASE":52,"r_case":53,"TIPO_LITERAL":54,"dos_puntos":55,"r_break":56,"default":57,"r_for":58,"ASIG_FOR":59,"r_while":60,"r_do":61,"r_void":62,"ASIG_PARAMETROS":63,"r_call":64,"PARAMETROS":65,"A_P":66,"interrogacion":67,"r_int":68,"r_double":69,"r_string":70,"r_char":71,"r_bool":72,"incremento":73,"decremento":74,"r_println":75,"r_print":76,"r_indexof":77,"r_round":78,"r_toupper":79,"r_length":80,"r_tolower":81,"r_typeof":82,"or":83,"not":84,"xor":85,"and":86,"mayor":87,"mayor_igual":88,"menor":89,"menor_igual":90,"igual_que":91,"no_igual":92,"mod":93,"potencia":94,"suma":95,"resta":96,"por":97,"div":98,"decimal":99,"cadena":100,"caracter":101,"boolean":102,"r_return":103,"r_continue":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",25:"identificador",26:"igual",28:"punto_coma",29:"r_const",31:"corchete_a",32:"corchete_c",33:"r_new",34:"punto",35:"r_pop",36:"parentesis_a",37:"parentesis_c",38:"r_push",39:"r_splice",40:"entero",41:"coma",42:"r_toChar",43:"r_graficarTs",44:"r_if",45:"r_else",48:"r_switch",49:"llave_a",51:"llave_c",53:"r_case",55:"dos_puntos",56:"r_break",57:"default",58:"r_for",60:"r_while",61:"r_do",62:"r_void",64:"r_call",67:"interrogacion",68:"r_int",69:"r_double",70:"r_string",71:"r_char",72:"r_bool",73:"incremento",74:"decremento",75:"r_println",76:"r_print",77:"r_indexof",78:"r_round",79:"r_toupper",80:"r_length",81:"r_tolower",82:"r_typeof",83:"or",84:"not",85:"xor",86:"and",87:"mayor",88:"mayor_igual",89:"menor",90:"menor_igual",91:"igual_que",92:"no_igual",93:"mod",94:"potencia",95:"suma",96:"resta",97:"por",98:"div",99:"decimal",100:"cadena",101:"caracter",102:"boolean",103:"r_return",104:"r_continue"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,6],[7,3],[7,4],[8,4],[8,2],[20,11],[20,16],[22,7],[23,6],[23,7],[23,9],[23,8],[21,4],[9,3],[9,5],[9,4],[46,2],[46,1],[47,4],[10,7],[50,2],[50,1],[52,6],[52,3],[11,5],[59,4],[59,4],[12,3],[13,5],[14,5],[14,6],[14,8],[14,6],[15,5],[15,6],[63,3],[63,1],[66,2],[65,3],[65,1],[16,3],[19,6],[24,1],[24,1],[24,1],[24,1],[24,1],[30,2],[30,2],[30,2],[30,2],[17,3],[17,5],[17,4],[17,3],[17,5],[27,5],[27,4],[27,2],[27,2],[27,2],[27,2],[27,2],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,1],[27,1],[54,1],[54,1],[54,1],[54,1],[54,1],[18,3],[18,2],[18,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 40: case 44: case 59: case 62:
this.$ = [$$[$0]]
break;
case 4:
console.error('Este es un error sintactico: ' + yytext + ', en la linea: '+ this._$.first_line+', en la columna: '+this._$.first_column);
			singleton.addErrores(new Errores("Error: " + yytext,"Sintactico",this._$.first_line,this._$.first_column))
break;
case 5:
this.$=$$[$0]
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 105:
this.$ = $$[$0]
break;
case 22:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 23:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],false,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 24:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 25:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,true,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 26:
this.$ = new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 27:
this.$=$$[$0-1]
break;
case 28:
this.$ = new VectorD1($$[$0-10],$$[$0-9],$$[$0-4],$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 30:
this.$ = new AsignarV($$[$0-6],$$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 31:
this.$ = new Pop($$[$0-5],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 32:
this.$ = new Push($$[$0-6],$$[$0-2],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 33:
this.$ = new Splice($$[$0-8],$$[$0-4],$$[$0-2],_$[$0-8].first_line,_$[$0-8].first_column)
break;
case 34:
this.$ = new CharArray($$[$0-6],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 35:
this.$ = new GTS(_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 36:
this.$ = new Iif($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 37:
this.$ = new If_Else($$[$0-3],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 38:
this.$ = new If_Else_If($$[$0-2],$$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 39: case 43:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 41:
this.$ = new Else_If($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 42:
this.$ = new Switch_I($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 45:
this.$ = new Casos($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 47:
this.$ = new For_Inst($$[$0-2][0],$$[$0-2][1],$$[$0-2][2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 48: case 49:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]]
break;
case 50:
this.$ = new IWhile($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$ = new DoWhile($$[$0-1],$$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 52:
this.$ = new Metodos($$[$0-3],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 53:
this.$ = new MetodosP($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 56:
this.$ =new Llamada($$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 57:
this.$ =new LlamadaP($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 58: case 61:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 60:
this.$ = new Declaracion($$[$0-1],$$[$0],null,true,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 63:
this.$ =  new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 64:
this.$ = new TernarioI($$[$0-5],$$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 65:
this.$=Type.INT
break;
case 66:
this.$=Type.DOUBLE
break;
case 67:
this.$=Type.STRING
break;
case 68:
this.$=Type.CHAR
break;
case 69:
this.$=Type.BOOLEAN
break;
case 70:
this.$ =  new InDe(1,$$[$0-1],OpcionesInDe.MAMA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 71:
this.$ =  new InDe(1,$$[$0-1],OpcionesInDe.MEME,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 72:
this.$ =  new InDe(0,$$[$0],OpcionesInDe.MAMA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 73:
this.$ =  new InDe(0,$$[$0],OpcionesInDe.MEME,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 74:
this.$ = new Imprimir(1,$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 76:
this.$ = new Imprimir(2,null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 77:
this.$ = new Imprimir(0,$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 79:
this.$ = new TernarioE($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 80:
this.$ = new IndexOf($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 81:
this.$ = new Round($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 82:
this.$ = new ToUpper($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 83:
this.$ = new ILength($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 84:
this.$ = new ToLower($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 85:
this.$ = new Type_Of($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 86:
this.$ = new Logica($$[$0-2],$$[$0],OpcionesLogicas.OR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 87:
this.$ = new Logica($$[$0],$$[$0],OpcionesLogicas.NOT,_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 88:
this.$ = new Logica($$[$0-2],$$[$0],OpcionesLogicas.XOR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 89:
this.$ = new Logica($$[$0-2],$$[$0],OpcionesLogicas.AND,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 90:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 91:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 92:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 93:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 94:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.IGUALQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 95:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.NOIGUAL,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 96:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MODULO,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 97:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 98:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MAS,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 99:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MENOS,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 100:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MULTIPLICAR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 101:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.DIVIDIR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 102:
this.$ = $$[$0-1]
break;
case 103:
this.$ = new EVector($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)
break;
case 104:
this.$ = new Acces($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 106:
this.$ = new Literal($$[$0],Type.INT,		_$[$0].first_line,_$[$0].first_column)
break;
case 107:
this.$ = new Literal($$[$0],Type.DOUBLE,	_$[$0].first_line,_$[$0].first_column)
break;
case 108:
this.$ = new Literal($$[$0],Type.STRING,	_$[$0].first_line,_$[$0].first_column)
break;
case 109:
this.$ = new Literal($$[$0],Type.CHAR,		_$[$0].first_line,_$[$0].first_column)
break;
case 110:
this.$ = new Literal($$[$0],Type.BOOLEAN,	_$[$0].first_line,_$[$0].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{1:[3]},{5:[1,61],6:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},o($VA,[2,3]),o($VA,[2,4]),o($VA,[2,5]),o($VA,[2,6]),o($VA,[2,7]),o($VA,[2,8]),o($VA,[2,9]),o($VA,[2,10]),o($VA,[2,11]),o($VA,[2,12]),o($VA,[2,13]),o($VA,[2,14]),o($VA,[2,15]),o($VA,$VB),o($VA,[2,17]),o($VA,[2,18]),o($VA,[2,19]),o($VA,[2,20]),o($VA,[2,21]),{25:[1,63]},{24:64,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($VC,$VD,{26:$VE,31:[1,66],34:[1,67],73:$VF,74:$VG}),{28:[1,70]},{25:$VH,27:71,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{36:[1,73]},{36:[1,74]},{25:$VH,27:75,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{16:76,49:$V8},{25:[1,77]},{25:[1,78]},{2:$V0,4:79,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{25:$VH,27:80,36:[1,81],40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:82,36:[1,83],40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:84,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{28:[1,85]},{28:[1,86]},{67:$VI,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{36:[1,103]},o($VY,[2,65]),o($VY,[2,66]),o($VY,[2,67]),o($VY,[2,68]),o($VY,[2,69]),{25:[1,104]},{25:[1,105]},{25:$VH,27:106,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:107,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:108,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:109,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:110,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:111,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:112,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VZ,[2,105]),o($VZ,[2,106]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,109]),o($VZ,[2,110]),{1:[2,1]},o($VA,[2,2]),{26:$V_,28:$V$,31:[1,116],36:$V01},{25:[1,117]},{25:$VH,27:118,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:119,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{35:[1,120],38:[1,121],39:[1,122],77:$V11},o($V21,[2,70]),o($V21,[2,71]),o($VA,[2,27]),{16:124,49:$V8,67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},o($VZ,$VD,{31:[1,127],34:[1,126]}),{25:[1,128]},{7:130,8:131,24:132,25:[1,133],29:$V2,30:25,59:129,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl},{16:134,49:$V8,67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{60:[1,135]},{36:[1,136]},{36:[1,137]},{6:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,51:[1,138],54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{28:[1,139],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{14:140,24:142,25:$VH,27:112,36:$V3,37:[1,141],40:$V4,54:55,62:$Vd,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{28:[1,143],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{14:144,24:142,25:$VH,27:112,36:$V3,40:$V4,54:55,62:$Vd,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{28:[1,145],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},o($VA,$V41),o($VA,[2,113]),{2:$V0,4:146,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:147,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{25:$VH,27:148,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:149,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:150,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:151,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:152,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:153,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:154,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:155,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:156,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:157,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:158,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:159,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:160,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:161,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:162,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{37:[1,163]},o($V21,[2,72]),o($V21,[2,73]),o($V51,[2,81],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V51,[2,82],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V51,[2,83],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V51,[2,84],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V51,[2,85],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V61,[2,87],{87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),{37:[1,164],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{25:$VH,27:165,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VA,[2,24]),{24:169,37:[1,166],63:167,66:168,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{32:[1,170]},{26:[1,171],28:[1,172]},{28:[1,173],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{32:[1,174],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{36:[1,175]},{36:[1,176]},{36:[1,177]},{25:$VH,27:178,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VA,[2,36],{46:180,47:181,45:[1,179]}),{25:$VH,27:182,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{77:$V11},{25:$VH,27:183,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{37:[1,184]},{37:[1,185]},{25:$VH,27:186,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:$VH,27:187,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{25:[1,188]},{26:$VE,73:$VF,74:$VG},o($VA,[2,50]),{25:$VH,27:189,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{24:169,37:[1,190],63:191,66:168,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{25:$VH,27:194,36:$V3,37:[1,192],40:$V4,54:55,65:193,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o([5,25,28,29,36,37,40,43,44,45,48,49,51,53,55,56,57,58,60,61,62,64,68,69,70,71,72,73,74,75,76,78,79,80,81,82,84,99,100,101,102,103,104],[2,63]),o($VA,[2,74]),{37:[1,195]},{28:[1,196]},{25:[1,197]},o($VA,[2,77]),{37:[1,198]},o($VA,[2,111]),{6:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,55:[1,199],56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{55:$V71,67:$VI,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},o($V61,[2,86],{87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V61,[2,88],{87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V61,[2,89],{87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V81,[2,90],{93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V81,[2,91],{93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V81,[2,92],{93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V81,[2,93],{93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V81,[2,94],{93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V81,[2,95],{93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($V91,[2,96],{95:$VU,96:$VV,97:$VW,98:$VX}),o($V91,[2,97],{95:$VU,96:$VV,97:$VW,98:$VX}),o($Va1,[2,98],{97:$VW,98:$VX}),o($Va1,[2,99],{97:$VW,98:$VX}),o($VZ,[2,100]),o($VZ,[2,101]),{28:[1,201]},o($VZ,[2,102]),{28:[1,202],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{49:[1,203]},{37:[1,204],41:$Vb1},o($Vc1,[2,59]),{25:[1,206]},{26:[1,207],31:[1,208]},{25:$VH,27:209,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VA,[2,25]),o($VA,[2,26]),o($VC,$Vd1,{26:[1,210]}),{37:[1,211]},{25:$VH,27:212,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{40:[1,213]},o($V51,[2,80],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),{16:214,44:$Ve1,49:$V8},o($VA,[2,38],{47:216,45:[1,217]}),o($Vf1,[2,40]),{55:$V71,67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{32:[1,218],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{49:[1,219]},{16:220,49:$V8},{28:[1,221],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{28:[1,222],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{26:$V_,28:$V$},{28:[1,223],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{16:224,49:$V8},{37:[1,225],41:$Vb1},{28:[1,226]},{37:[1,227],41:[1,228]},o($Vc1,[2,62],{67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),{28:[1,229]},o($VA,[2,76]),{36:$V01},{28:[1,230]},{2:$V0,4:231,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{25:$VH,27:232,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VA,[2,35]),o($VA,[2,22]),{2:$V0,4:233,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{16:234,49:$V8},{24:169,66:235,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},o($Vc1,[2,60]),{33:[1,236],42:[1,237]},{32:[1,238]},{28:[1,239],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{25:$VH,27:240,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{28:[1,241]},{37:[1,242],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{41:[1,243]},o($VA,[2,37]),{25:$VH,27:244,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($Vf1,[2,39]),{44:$Ve1},o($VZ,$Vd1),{50:245,52:246,53:$Vg1,57:$Vh1},o($VA,[2,47]),{25:$Vi1,30:249,73:$Vk,74:$Vl},{25:$Vi1,30:251,73:$Vk,74:$Vl},o($VA,[2,51]),o($Vj1,[2,52]),{16:252,49:$V8},o($VA,[2,56]),{28:[1,253]},{25:$VH,27:254,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VA,[2,75]),o($VA,[2,78]),{6:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,28:[1,255],29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},o($V51,[2,79],{83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),{6:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:256,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},o($Vj1,[2,55]),o($Vc1,[2,58]),{24:257,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{25:$VH,27:258,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{26:[1,259]},o($VA,[2,23]),{28:[1,260],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},o($VA,[2,31]),{28:[1,261]},{25:$VH,27:262,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{16:263,49:$V8,67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{51:[1,264],52:265,53:$Vg1,57:$Vh1},o($Vk1,[2,44]),{40:$V4,54:266,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{55:[1,267]},{37:[2,48]},{73:$VF,74:$VG},{37:[2,49]},o($Vj1,[2,53]),o($VA,[2,57]),o($Vc1,[2,61],{67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX}),o($VA,[2,64]),o($Vl1,$VB,{51:[1,268]}),{31:[1,269]},{28:[1,270],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{33:[1,271]},o($VA,[2,30]),o($VA,[2,32]),{37:[1,272],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},o($Vf1,[2,41]),o($VA,[2,42]),o($Vk1,[2,43]),{55:[1,273]},{2:$V0,4:274,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},o($Vj1,[2,54]),{25:$VH,27:275,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},o($VA,[2,34]),{24:276,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj},{28:[1,277]},{2:$V0,4:278,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},o($Vk1,[2,46],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,30:25,27:39,54:55,6:62,25:$V1,29:$V2,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,56:$V9,58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz}),{32:[1,279],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{31:[1,280]},o($VA,[2,33]),{6:62,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,22:20,23:21,24:22,25:$V1,27:39,29:$V2,30:25,36:$V3,40:$V4,43:$V5,44:$V6,48:$V7,49:$V8,54:55,56:[1,281],58:$Va,60:$Vb,61:$Vc,62:$Vd,64:$Ve,68:$Vf,69:$Vg,70:$Vh,71:$Vi,72:$Vj,73:$Vk,74:$Vl,75:$Vm,76:$Vn,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx,103:$Vy,104:$Vz},{28:[1,282]},{25:$VH,27:283,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{28:[1,284]},o($VA,[2,28]),{32:[1,285],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},o($Vl1,$V41,{51:$Vm1,53:$Vm1,57:$Vm1}),{31:[1,286]},{25:$VH,27:287,36:$V3,40:$V4,54:55,78:$Vo,79:$Vp,80:$Vq,81:$Vr,82:$Vs,84:$Vt,99:$Vu,100:$Vv,101:$Vw,102:$Vx},{32:[1,288],67:$V31,83:$VJ,85:$VK,86:$VL,87:$VM,88:$VN,89:$VO,90:$VP,91:$VQ,92:$VR,93:$VS,94:$VT,95:$VU,96:$VV,97:$VW,98:$VX},{28:[1,289]},o($VA,[2,29])],
defaultActions: {61:[2,1],249:[2,48],251:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const {Declaracion} = require('../instrucciones/declaraciones');
	const {Literal} = require('../Expresiones/Literales');
	const {Type} = require('../Symbols/type')
	const {Asignar} = require('../instrucciones/asignar');
	const {Aritmeticas} = require('../Expresiones/Aritmeticas');
	const {AritmeticasOptions} = require('../Expresiones/aritmeticasOpc');
	const {Relacional} = require('../Expresiones/Relacional');
	const {OpcionRelacional} = require('../Expresiones/RelacionalOpc');
	const {Logica} = require('../Expresiones/Logicas');
	const {OpcionesLogicas} = require('../Expresiones/LogicasOpc');
	const {OpcionesInDe} = require('../instrucciones/IncrementosOpc');
	const {InDe} = require('../instrucciones/Incrementos');
	const {Acces} = require('../Expresiones/Acceso');
	const {Iif} = require('../instrucciones/InstruccionIF')
	const {If_Else} = require('../instrucciones/If_else')
	const {Bloque} = require('../instrucciones/Bloque')
	const {Imprimir} = require('../instrucciones/imprimir')
	const {IWhile} = require('../instrucciones/InstWhile')
	const {Type_Of} = require('../Expresiones/TypeOf')
	const {Else_If} = require('../instrucciones/else_if')
	const {If_Else_If} = require('../instrucciones/IF2')
	const {Casos} = require('../instrucciones/Cases')
	const {Switch_I} = require('../instrucciones/Switch_I')
	const {DoWhile} = require('../instrucciones/DoWhile')
	const {For_Inst} = require('../instrucciones/For_I')
	const {Metodos} = require('../instrucciones/IMetdos')
	const {Llamada} = require('../instrucciones/Llamada')
	const {MetodosP} = require('../instrucciones/MetodoPara')
	const {LlamadaP} = require('../instrucciones/llamadaP')
	const {TernarioI} = require('../instrucciones/Ternario_I')
	const {ToLower} = require('../Expresiones/ToLower')
	const {ToUpper} = require('../Expresiones/ToUpper')
	const {Round} = require('../Expresiones/Round')
	const {ILength} = require('../Expresiones/Length')
	const {TernarioE} = require('../Expresiones/Ternario_E')
	const {VectorD1} = require('../instrucciones/Vector1')
	const {AsignarV} = require('../instrucciones/asignarV');
	const {Pop} = require('../instrucciones/Pop');
	const {Push} = require('../instrucciones/Push');
	const {Splice} = require('../instrucciones/Splice');
	const {EVector} = require('../Expresiones/EVector')
	const {CharArray} = require('../instrucciones/CharArray');
	const {IndexOf} = require('../Expresiones/IndexOf')
	const { Singleton } = require('../Singleton/Singleton');
	const { Errores } = require('../Singleton/Errores');
	const {GTS} = require('../instrucciones/GraficarTs')

	const singleton = Singleton.getInstance()

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'BARRAINVERTIDA';
break;
case 4:return 'NUEVALINEA';
break;
case 5:return 'RETORNO';
break;
case 6:return 'TABULACION';
break;
case 7:return 68;
break;
case 8:return 69;
break;
case 9:return 71;
break;
case 10:return 72;
break;
case 11:return 70;
break;
case 12:return 29;
break;
case 13:return 44;
break;
case 14:return 45;
break;
case 15:return 48;
break;
case 16:return 53;
break;
case 17:return 'r_default';
break;
case 18:return 58;
break;
case 19:return 60;
break;
case 20:return 61;
break;
case 21:return 56;
break;
case 22:return 104;
break;
case 23:return 62;
break;
case 24:return 103;
break;
case 25:return 64;
break;
case 26:return 75;
break;
case 27:return 76;
break;
case 28:return 82;
break;
case 29:return 81;
break;
case 30:return 79;
break;
case 31:return 78;
break;
case 32:return 80;
break;
case 33:return 33;
break;
case 34:return 43;
break;
case 35:return 35;
break;
case 36:return 38;
break;
case 37:return 39;
break;
case 38:return 77;
break;
case 39:return 42;
break;
case 40:return 88;
break;
case 41:return 90;
break;
case 42:return 91;
break;
case 43:return 92;
break;
case 44:return 87;
break;
case 45:return 89;
break;
case 46:return 83;
break;
case 47:return 86;
break;
case 48:return 85;
break;
case 49:return 84;
break;
case 50:return 26;
break;
case 51:return 28;
break;
case 52:return 41;
break;
case 53:return 55;
break;
case 54:return 36;
break;
case 55:return 37;
break;
case 56:return 49;
break;
case 57:return 51;
break;
case 58:return 31;
break;
case 59:return 32;
break;
case 60:return 67;
break;
case 61:return 34;
break;
case 62:return 73;
break;
case 63:return 74;
break;
case 64:return 94;
break;
case 65:return 95;
break;
case 66:return 96;
break;
case 67:return 97;
break;
case 68:return 98;
break;
case 69:return 93;
break;
case 70:return 99;
break;
case 71:return 40;
break;
case 72:return 100;
break;
case 73:return 101;
break;
case 74:return 102;
break;
case 75:return 25;
break;
case 76:
break;
case 77:
break;
case 78:return 5;
break;
case 79: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
							singleton.addErrores(new Errores("Error: " + yy_.yytext,"Lexico",yy_.yylloc.first_line,yy_.yylloc.first_column))
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:Typeof\b)/i,/^(?:ToLower\b)/i,/^(?:ToUpper\b)/i,/^(?:Round\b)/i,/^(?:Length\b)/i,/^(?:new\b)/i,/^(?:graficar_ts\b)/i,/^(?:pop\b)/i,/^(?:push\b)/i,/^(?:splice\b)/i,/^(?:indexof\b)/i,/^(?:toCharArray\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:=)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]?')/i,/^(?:true|false\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}