/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,20],$V2=[1,19],$V3=[1,21],$V4=[1,22],$V5=[1,28],$V6=[1,35],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,37],$Vd=[1,38],$Ve=[1,39],$Vf=[1,40],$Vg=[1,41],$Vh=[1,32],$Vi=[1,33],$Vj=[1,29],$Vk=[1,30],$Vl=[1,31],$Vm=[1,34],$Vn=[1,36],$Vo=[5,21,25,26,30,33,35,37,40,41,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,83,84],$Vp=[1,44],$Vq=[1,48],$Vr=[1,49],$Vs=[1,53],$Vt=[1,52],$Vu=[1,51],$Vv=[1,55],$Vw=[1,56],$Vx=[1,57],$Vy=[1,58],$Vz=[1,59],$VA=[5,21,25,26,30,31,33,35,37,40,41,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,63,78,79,80,81,82,83,84],$VB=[1,77],$VC=[1,78],$VD=[1,79],$VE=[5,21,24,25,26,30,32,33,35,37,40,41,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,83,84],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[1,95],$VS=[1,96],$VT=[1,97],$VU=[5,21,24,25,26,30,32,33,35,37,40,41,42,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,84],$VV=[5,21,24,25,26,30,32,33,35,37,39,40,41,42,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,84],$VW=[2,92],$VX=[5,21,24,25,26,30,32,33,35,37,40,41,42,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,83,84],$VY=[1,163],$VZ=[32,50],$V_=[1,167],$V$=[5,21,25,26,27,30,33,35,37,40,41,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,83,84],$V01=[5,21,24,25,26,30,32,33,35,37,40,41,42,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,83,84],$V11=[5,21,24,25,26,30,32,33,35,37,40,41,42,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,83,84],$V21=[5,21,24,25,26,30,32,33,35,37,40,41,42,44,45,46,48,50,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,83,84],$V31=[5,21,25,26,30,32,33,35,37,40,41,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,83,84],$V41=[1,188],$V51=[1,189],$V61=[1,191],$V71=[35,37,41],$V81=[2,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INTRUCCIONES":4,"EOF":5,"INTRUCCION":6,"DVARIABLES":7,"ASIGNACION":8,"IF":9,"SWITCH":10,"FOR":11,"WHILE":12,"DO_WHILE":13,"MET_FUN":14,"LLAMADA":15,"BLOQUE":16,"FUNCIONES_NATIVAS":17,"INCREMENTOS":18,"RETORNO":19,"TIPO_DATO":20,"identificador":21,"igual":22,"EXPRESION":23,"punto_coma":24,"r_const":25,"r_if":26,"r_else":27,"ELSE_IF":28,"I_ELSE_IF":29,"r_switch":30,"parentesis_a":31,"parentesis_c":32,"llave_a":33,"CASE":34,"llave_c":35,"I_CASE":36,"r_case":37,"TIPO_LITERAL":38,"dos_puntos":39,"r_break":40,"default":41,"r_for":42,"ASIG_FOR":43,"r_while":44,"r_do":45,"r_void":46,"ASIG_PARAMETROS":47,"r_call":48,"PARAMETROS":49,"coma":50,"A_P":51,"r_int":52,"r_double":53,"r_string":54,"r_char":55,"r_bool":56,"incremento":57,"decremento":58,"r_println":59,"r_print":60,"r_typeof":61,"or":62,"not":63,"xor":64,"and":65,"mayor":66,"mayor_igual":67,"menor":68,"menor_igual":69,"igual_que":70,"no_igual":71,"mod":72,"potencia":73,"suma":74,"resta":75,"por":76,"div":77,"entero":78,"decimal":79,"cadena":80,"caracter":81,"boolean":82,"r_return":83,"r_continue":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"identificador",22:"igual",24:"punto_coma",25:"r_const",26:"r_if",27:"r_else",30:"r_switch",31:"parentesis_a",32:"parentesis_c",33:"llave_a",35:"llave_c",37:"r_case",39:"dos_puntos",40:"r_break",41:"default",42:"r_for",44:"r_while",45:"r_do",46:"r_void",48:"r_call",50:"coma",52:"r_int",53:"r_double",54:"r_string",55:"r_char",56:"r_bool",57:"incremento",58:"decremento",59:"r_println",60:"r_print",61:"r_typeof",62:"or",63:"not",64:"xor",65:"and",66:"mayor",67:"mayor_igual",68:"menor",69:"menor_igual",70:"igual_que",71:"no_igual",72:"mod",73:"potencia",74:"suma",75:"resta",76:"por",77:"div",78:"entero",79:"decimal",80:"cadena",81:"caracter",82:"boolean",83:"r_return",84:"r_continue"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,5],[7,6],[7,3],[7,4],[8,4],[8,2],[9,3],[9,5],[9,4],[28,2],[28,1],[29,4],[10,7],[34,2],[34,1],[36,6],[36,3],[11,5],[43,4],[43,4],[12,3],[13,5],[14,5],[14,6],[14,5],[14,6],[15,5],[15,6],[47,3],[47,1],[51,2],[49,3],[49,1],[16,3],[20,1],[20,1],[20,1],[20,1],[20,1],[18,2],[18,2],[18,2],[18,2],[17,3],[17,5],[17,4],[17,3],[17,5],[17,2],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[23,1],[38,1],[38,1],[38,1],[38,1],[38,1],[19,3],[19,2],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 28: case 32: case 47: case 50:
this.$ = [$$[$0]]
break;
case 4:
console.error('Este es un error sintactico: ' + yytext + ', en la linea: '+ this._$.first_line+', en la columna: '+this._$.first_column);
break;
case 5:
this.$=$$[$0]
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 85:
this.$ = $$[$0]
break;
case 18:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 19:
this.$ = new Declaracion($$[$0-4],$$[$0-3],$$[$0-1],false,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 20:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,true,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 21:
this.$ = new Declaracion($$[$0-2],$$[$0-1],null,true,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 22:
this.$ = new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 23:
this.$=$$[$0-1]
break;
case 24:
this.$ = new Iif($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 25:
this.$ = new If_Else($$[$0-3],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 26:
this.$ = new If_Else_If($$[$0-2],$$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 27: case 31:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 29:
this.$ = new Else_If($$[$0-1],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 30:
this.$ = new Switch_I($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column)
break;
case 33:
this.$ = new Casos($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 35:
this.$ = new For_Inst($$[$0-2][0],$$[$0-2][1],$$[$0-2][2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 36: case 37:
this.$ = [$$[$0-3],$$[$0-2],$$[$0]]
break;
case 38:
this.$ = new IWhile($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 39:
this.$ = new DoWhile($$[$0-1],$$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 40:
this.$ = new Metodos($$[$0-3],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 41:
this.$ = new MetodosP($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 44:
this.$ =new Llamada($$[$0-3],_$[$0-4].first_line,_$[$0-4].first_column)
break;
case 45:
this.$ =new LlamadaP($$[$0-4],$$[$0-2],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 46: case 49:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 48:
this.$ = new Declaracion($$[$0-1],$$[$0],null,true,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 51:
this.$ =  new Bloque($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 52:
this.$=Type.INT
break;
case 53:
this.$=Type.DOUBLE
break;
case 54:
this.$=Type.STRING
break;
case 55:
this.$=Type.CHAR
break;
case 56:
this.$=Type.BOOLEAN
break;
case 57:
this.$ =  new InDe(1,$$[$0-1],OpcionesInDe.MAMA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 58:
this.$ =  new InDe(1,$$[$0-1],OpcionesInDe.MEME,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 59:
this.$ =  new InDe(0,$$[$0],OpcionesInDe.MAMA,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 60:
this.$ =  new InDe(0,$$[$0],OpcionesInDe.MEME,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 61:
this.$ = new Imprimir(1,$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 63:
this.$ = new Imprimir(2,null,_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 64:
this.$ = new Imprimir(0,$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 66:
this.$ = new Type_Of($$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 67:
this.$ = new Logica($$[$0-2],$$[$0],OpcionesLogicas.OR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 68:
this.$ = new Logica($$[$0],$$[$0],OpcionesLogicas.NOT,_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 69:
this.$ = new Logica($$[$0-2],$$[$0],OpcionesLogicas.XOR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 70:
this.$ = new Logica($$[$0-2],$$[$0],OpcionesLogicas.AND,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 71:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 72:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 73:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 74:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 75:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.IGUALQUE,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 76:
this.$ = new Relacional($$[$0-2],$$[$0],OpcionRelacional.NOIGUAL,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 77:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MODULO,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 78:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.POTENCIA,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 79:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MAS,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 80:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MENOS,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 81:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.MULTIPLICAR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 82:
this.$ = new Aritmeticas($$[$0-2],$$[$0],AritmeticasOptions.DIVIDIR,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 83:
this.$ = $$[$0-1]
break;
case 84:
this.$ = new Acces($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 86:
this.$ = new Literal($$[$0],Type.INT,		_$[$0].first_line,_$[$0].first_column)
break;
case 87:
this.$ = new Literal($$[$0],Type.DOUBLE,	_$[$0].first_line,_$[$0].first_column)
break;
case 88:
this.$ = new Literal($$[$0],Type.STRING,	_$[$0].first_line,_$[$0].first_column)
break;
case 89:
this.$ = new Literal($$[$0],Type.CHAR,		_$[$0].first_line,_$[$0].first_column)
break;
case 90:
this.$ = new Literal($$[$0],Type.BOOLEAN,	_$[$0].first_line,_$[$0].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},{1:[3]},{5:[1,42],6:43,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},o($Vo,[2,3]),o($Vo,[2,4]),o($Vo,[2,5]),o($Vo,[2,6]),o($Vo,[2,7]),o($Vo,[2,8]),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vo,[2,16],{24:$Vp}),o($Vo,[2,17]),{21:[1,45]},{20:46,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg},{22:[1,47],57:$Vq,58:$Vr},{21:$Vs,23:50,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{31:[1,60]},{31:[1,61]},{21:$Vs,23:62,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{16:63,33:$V5},{21:[1,64]},{21:[1,65]},{2:$V0,4:66,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},{21:$Vs,23:67,31:[1,68],38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:69,31:[1,70],38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:71,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:[1,72]},{21:[1,73]},{21:$Vs,23:74,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{24:[1,75]},{24:[1,76]},{21:[2,52]},{21:[2,53]},{21:[2,54]},{21:[2,55]},{21:[2,56]},{1:[2,1]},o($Vo,[2,2]),o($VA,[2,23]),{22:$VB,24:$VC,31:$VD},{21:[1,80]},{21:$Vs,23:81,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VE,[2,57]),o($VE,[2,58]),{16:82,33:$V5,62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{21:$Vs,23:98,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:99,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VU,[2,84]),o($VU,[2,85]),o($VV,[2,86]),o($VV,[2,87]),o($VV,[2,88]),o($VV,[2,89]),o($VV,[2,90]),{21:[1,100]},{7:102,8:103,18:105,20:104,21:$V1,25:$V2,43:101,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi},{16:106,33:$V5,62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{44:[1,107]},{31:[1,108]},{31:[1,109]},{6:43,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,35:[1,110],40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},{24:[1,111],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{14:112,20:114,21:$Vs,23:99,31:$Vt,32:[1,113],38:54,46:$Va,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{24:[1,115],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{14:116,20:114,21:$Vs,23:99,31:$Vt,38:54,46:$Va,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($Vo,[2,66],{62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($VE,[2,59]),o($VE,[2,60]),{24:[1,117],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},o($Vo,$VW),o($Vo,[2,93]),{21:$Vs,23:118,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VA,[2,20]),{20:122,32:[1,119],47:120,51:121,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg},{22:[1,123],24:[1,124]},{24:[1,125],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},o($Vo,[2,24],{28:127,29:128,27:[1,126]}),{21:$Vs,23:129,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:130,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:131,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:132,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:133,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:134,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:135,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:136,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:137,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:138,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:139,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:140,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:141,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:142,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:143,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VX,[2,68],{66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),{32:[1,144],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{32:[1,145]},{32:[1,146]},{21:$Vs,23:147,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:$Vs,23:148,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{21:[1,149]},{24:$Vp},o($Vo,[2,38]),{21:$Vs,23:150,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{20:122,32:[1,151],47:152,51:121,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg},{21:$Vs,23:155,31:$Vt,32:[1,153],38:54,49:154,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o([5,21,25,26,27,30,32,33,35,37,40,41,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,83,84],[2,51]),o($Vo,[2,61]),{32:[1,156]},{24:[1,157]},{21:[1,158]},o($Vo,[2,64]),{32:[1,159]},o($Vo,[2,91]),{24:[1,160],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{16:161,33:$V5},{32:[1,162],50:$VY},o($VZ,[2,47]),{21:[1,164]},{21:$Vs,23:165,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($VA,[2,21]),o($VA,[2,22]),{16:166,26:$V_,33:$V5},o($Vo,[2,26],{29:168,27:[1,169]}),o($V$,[2,28]),o($VX,[2,67],{66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($VX,[2,69],{66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($VX,[2,70],{66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V01,[2,71],{72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V01,[2,72],{72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V01,[2,73],{72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V01,[2,74],{72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V01,[2,75],{72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V01,[2,76],{72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V11,[2,77],{74:$VQ,75:$VR,76:$VS,77:$VT}),o($V11,[2,78],{74:$VQ,75:$VR,76:$VS,77:$VT}),o($V21,[2,79],{76:$VS,77:$VT}),o($V21,[2,80],{76:$VS,77:$VT}),o($VU,[2,81]),o($VU,[2,82]),o($VU,[2,83]),{33:[1,170]},{16:171,33:$V5},{24:[1,172],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{24:[1,173],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{22:$VB,24:$VC},{24:[1,174],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{16:175,33:$V5},{32:[1,176],50:$VY},{24:[1,177]},{32:[1,178],50:[1,179]},o($VZ,[2,50],{62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),{24:[1,180]},o($Vo,[2,63]),{31:$VD},{24:[1,181]},o($VA,[2,18]),o($V31,[2,42]),{16:182,33:$V5},{20:122,51:183,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg},o($VZ,[2,48]),{24:[1,184],62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},o($Vo,[2,25]),{21:$Vs,23:185,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($V$,[2,27]),{26:$V_},{34:186,36:187,37:$V41,41:$V51},o($Vo,[2,35]),{18:190,21:$V61,57:$Vh,58:$Vi},{18:192,21:$V61,57:$Vh,58:$Vi},o($Vo,[2,39]),o($V31,[2,40]),{16:193,33:$V5},o($Vo,[2,44]),{24:[1,194]},{21:$Vs,23:195,31:$Vt,38:54,63:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},o($Vo,[2,62]),o($Vo,[2,65]),o($V31,[2,43]),o($VZ,[2,46]),o($VA,[2,19]),{16:196,33:$V5,62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT},{35:[1,197],36:198,37:$V41,41:$V51},o($V71,[2,32]),{38:199,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz},{39:[1,200]},{32:[2,36]},{57:$Vq,58:$Vr},{32:[2,37]},o($V31,[2,41]),o($Vo,[2,45]),o($VZ,[2,49],{62:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,69:$VL,70:$VM,71:$VN,72:$VO,73:$VP,74:$VQ,75:$VR,76:$VS,77:$VT}),o($V$,[2,29]),o($Vo,[2,30]),o($V71,[2,31]),{39:[1,201]},{2:$V0,4:202,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},{2:$V0,4:203,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},o($V71,[2,34],{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,6:43,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:$V6,42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn}),{6:43,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:$V1,25:$V2,26:$V3,30:$V4,33:$V5,40:[1,204],42:$V7,44:$V8,45:$V9,46:$Va,48:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,83:$Vm,84:$Vn},{24:[1,205]},o([21,25,26,30,33,40,42,44,45,46,48,52,53,54,55,56,57,58,59,60,61,83,84],$VW,{35:$V81,37:$V81,41:$V81})],
defaultActions: {37:[2,52],38:[2,53],39:[2,54],40:[2,55],41:[2,56],42:[2,1],190:[2,36],192:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const {Declaracion} = require('../instrucciones/declaraciones');
	const {Literal} = require('../Expresiones/Literales');
	const {Type} = require('../Symbols/type')
	const {Asignar} = require('../instrucciones/asignar');
	const {Aritmeticas} = require('../Expresiones/Aritmeticas');
	const {AritmeticasOptions} = require('../Expresiones/aritmeticasOpc');
	const {Relacional} = require('../Expresiones/Relacional');
	const {OpcionRelacional} = require('../Expresiones/RelacionalOpc');
	const {Logica} = require('../Expresiones/Logicas');
	const {OpcionesLogicas} = require('../Expresiones/LogicasOpc');
	const {OpcionesInDe} = require('../instrucciones/IncrementosOpc');
	const {InDe} = require('../instrucciones/Incrementos');
	const {Acces} = require('../Expresiones/Acceso');
	const {Iif} = require('../instrucciones/InstruccionIF')
	const {If_Else} = require('../instrucciones/If_else')
	const {Bloque} = require('../instrucciones/Bloque')
	const {Imprimir} = require('../instrucciones/imprimir')
	const {IWhile} = require('../instrucciones/InstWhile')
	const {Type_Of} = require('../Expresiones/TypeOf')
	const {Else_If} = require('../instrucciones/else_if')
	const {If_Else_If} = require('../instrucciones/IF2')
	const {Casos} = require('../instrucciones/Cases')
	const {Switch_I} = require('../instrucciones/Switch_I')
	const {DoWhile} = require('../instrucciones/DoWhile')
	const {For_Inst} = require('../instrucciones/For_I')
	const {Metodos} = require('../instrucciones/IMetdos')
	const {Llamada} = require('../instrucciones/Llamada')
	const {MetodosP} = require('../instrucciones/MetodoPara')
	const {LlamadaP} = require('../instrucciones/llamadaP')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 'BARRAINVERTIDA';
break;
case 4:return 'NUEVALINEA';
break;
case 5:return 'RETORNO';
break;
case 6:return 'TABULACION';
break;
case 7:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 52;
					
break;
case 8:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 53;
					
break;
case 9:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 55;
					
break;
case 10:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 56;
					
break;
case 11:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 54;
					
break;
case 12:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 25;
					
break;
case 13:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 26;
					
break;
case 14:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 27;
					
break;
case 15:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 30;
					
break;
case 16:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 37;
					
break;
case 17:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 'r_default';
					
break;
case 18:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 42;
					
break;
case 19:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 44;
					
break;
case 20:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 45;
					
break;
case 21:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 40;
					
break;
case 22:
					//	console.log("Se reconocio el lexema: " + yy_.yytext);
						return 84;
					
break;
case 23:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 46;
					
break;
case 24:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 83;
					
break;
case 25:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 48;
					
break;
case 26:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 59;
					
break;
case 27:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 60;
					
break;
case 28:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 61;
					
break;
case 29:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 67;
					
break;
case 30:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 69;
					
break;
case 31:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 70;
					
break;
case 32:
						return '.'
					
break;
case 33:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 71;
					
break;
case 34:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 66;
					
break;
case 35:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 68;
					
break;
case 36:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 62;
					
break;
case 37:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 65;
					
break;
case 38:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 64;
					
break;
case 39:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 63;
					
break;
case 40:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 22;
					
break;
case 41:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 24;
					
break;
case 42:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 50;
					
break;
case 43:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 39;
					
break;
case 44:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 31;
					
break;
case 45:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 32;
					
break;
case 46:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 33;
					
break;
case 47:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 35;
					
break;
case 48:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 57;
					
break;
case 49:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 58;
					
break;
case 50:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 73;
					
break;
case 51:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 74;
					
break;
case 52:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 75;
					
break;
case 53:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 76;
					
break;
case 54:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 77;
					
break;
case 55:
						//console.log("Se reconocio el lexema: " + yy_.yytext);
						return 72;
					
break;
case 56:
							//console.log("Se reconocio el lexema: " + yy_.yytext);
							return 79;
						
break;
case 57:
							//console.log("Se reconocio el lexema: " + yy_.yytext);
							return 78;
						
break;
case 58:
							//console.log("Se reconocio el lexema: " + yy_.yytext);
							return 80;
						
break;
case 59:
							//console.log("Se reconocio el lexema: " + yy_.yytext);
							return 81;
						
break;
case 60:
							//console.log("Se reconocio el lexema: " + yy_.yytext);
							return 82;
						
break;
case 61:
							//console.log("Se reconocio el lexema: " + yy_.yytext);
							return 21;
						
break;
case 62:
break;
case 63:
break;
case 64:return 5;
break;
case 65: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:Println\b)/i,/^(?:Print\b)/i,/^(?:Typeof\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:\.)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:=)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]?')/i,/^(?:true|false\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}